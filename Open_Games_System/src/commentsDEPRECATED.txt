MAIN
//        Token player = new Token(0,0,new Image(new FileInputStream("src/O.png")));
//        player.setFitWidth((double) resolution/10);
//        player.setFitHeight((double) resolution/10);
//        Grid grid = new Grid(10,10,resolution,resolution);
//        Canvas canvas = new Canvas(resolution,resolution);
//        player.setPosition(grid.getTile(0,9).getX(),grid.getTile(0,9).getY());
//        System.out.println("X: "+player.getX()+"\tY: "+player.getY());
//        MovementSnakeLadder pain = new painSnakeLadder(player);
//        GraphicsContext gc = canvas.getGraphicsContext2D();
//        Image bg = new Image(new FileInputStream("src/Snake_ladder_BG.jpg"));
//        pain.limitX = resolution;
//        pain.limitY = resolution;
//        final long startNanoTime = System.nanoTime();
//        EventHandler<KeyEvent> movent = new EventHandler<KeyEvent>() {
//            @Override
//            public void handle(KeyEvent event) {
//                if(event.getCharacter().charAt(0) == 'w')
//                    pain.moveUp();
//                else if(event.getCharacter().charAt(0) == 's')
//                    pain.moveDown();
//                else if(event.getCharacter().charAt(0) == 'a')
//                    pain.moveLeft();
//                else if(event.getCharacter().charAt(0) == 'd')
//                    pain.moveRight();
//                else if(event.getCharacter().charAt(0) == ' ') {
//                    boolean flag = true;
//                    int roll = Dice.roll(6) + 1;
//                    for(int i = 0; i < roll; ++i) {
//                        if(pain.getCurrX() < 0.9 * resolution && flag) pain.moveRight();
//                        else if (pain.getCurrX() > 0 && !flag) pain.moveLeft();
//                        else {
//                            pain.moveUp();
//                            flag = !flag;
//                        }
//                    }
//                }
//            }
//        };
//
//        grid.addEventHandler(KeyEvent.KEY_TYPED, movent);

//        Thread main = new Thread(new SnakeLadder(gc, bg, player, pain, can));
//        main.start();

//        Thread animation = new Thread(new Animator(gc, bg, player, pain));
//        animation.start();

//        new Thread() {
//            final AnimationTimer ani = new AnimationTimer() {
//                @Override
//                public void handle(long now) {
//                    gc.drawImage(bg,0,0, Main.resolution, Main.resolution);
//                    gc.drawImage(player.getImage(), pain.currX, pain.currY, (double) Main.resolution/10, (double) Main.resolution/10);
//                }
//            };
//
//            @Override
//            public void run() {
//                ani.start();
//            }
//        }.start();
//       new AnimationTimer(){
//            double x=0;
//            double y=9;
//            boolean ascending = true;
//            double limitx = grid.getTile(9,9).getX();
//            double limity = grid.getTile(9,9).getY();
//            double t;
            //Scanner jeb = new Scanner(System.in);
            //double i=0.05;
//            boolean flag=true;
//            Tile taky = grid.getTile(((int)Math.floor(x)),(int)Math.floor(y));
//            public void handle(long currentNanoTime){
//                t = (currentNanoTime - startNanoTime) / 1000000000.0;
/*                if(x<0)
                    x+=i;*/

/*                if(!pain.onRouteX()){
                    taky = grid.getTile(((int)Math.floor(x)),(int)Math.floor(y));
                    pain.moveTo(taky);
                    if(x < 9)x++;
                    else {
                        this.stop();
                        System.out.println("Too soon");
                    }
                }*/
/*                System.out.println("X: "+x+"\tY: "+y);*/
/*                if(flag)
                    x+=i;
                if(!flag)
                    x-=i;*/
/*                System.out.println("Getfrom: "+pain.getFromX()+"\tgetTo: "+pain.getToX());*/
                //System.out.println(i);
/*                if(x>9.9 || x<0.0){
                    if(y<=0.1 && Math.floor(x)<=0.1)
                        this.stop();
                    flag=!flag;
                    y--;
                    System.out.println(flag);
                    System.out.println(y);
                }*/
                //pain.onRouteX();
                //pain.moveTo(taky);
                //System.out.println("Is done X:"+pain.isDoneX()+"\tIs done Y: "+pain.isDoneY());
                //System.out.println("Is done: "+pain.isDone());
                //String str = jeb.next();
//                gc.drawImage(bg,0,0, resolution, resolution);
                /*if((pain.getCurrX() == 900 && !pain.reverseflagX)  || (pain.getCurrX() == 0 && pain.reverseflagX)) {
                    pain.reverseflagX = !pain.reverseflagX;
                    gc.drawImage(player.getImage(), pain.getCurrX(), pain.moveDebY());

                }
                else {

                    gc.drawImage(player.getImage(), pain.moveDebX(), pain.getCurrY());

                }*/
                //Logic contributed by gawish, will be implemented into the other function
//                if((pain.getCurrX() == pain.limitX && !pain.toggleX)  || (pain.getCurrX() == 0 && pain.toggleX)) {
//                    pain.toggleX = !pain.toggleX;
//                    gc.drawImage(player.getImage(), pain.getCurrX(), pain.moveDebY(), (double) resolution/9, (double) resolution/9);
//                }
//                else {
//                    gc.drawImage(player.getImage(), pain.moveDebX(), pain.getCurrY(), (double) resolution/9, (double) resolution/9);
//
//                }

                //taky = grid.getTile((int) x, (int) y);
                //pain.moveTo(taky);
//                if(pain.isDoneX()) Main.wait(250);
//                gc.drawImage(player.getImage(), pain.currX, pain.currY, (double) resolution/10, (double) resolution/10);
//            }
//        }.start();
//        Group root = new Group(canvas);
//        Parent root = FXMLLoader.load(getClass().getResource("sample.fxml"));
//        Scene scene = new Scene(root,resolution,resolution);
//        scene.addEventHandler(KeyEvent.KEY_TYPED, movent);
//        primaryStage.setScene(scene);
//        primaryStage.show();